# Working with a single sequence

# Step 1: Obtain the sequence
dna = "ATCTAGAGGATATAC"

# Step 2: Create a dictionary to store the bases and their respective complements.
# We use curly brackets to create dictionaries. And specify the key-value pair. The key will be the base, while the value will be the complement
base_complements = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}
# NB:To access a dictionary value, we call the dictionary and use its key within a square bracket. See the code below as an example
# What is the complement of A and C?
A = base_complements['A']
C = base_complements['C']
print(A + C)

# Step 3: To find the complement of the sequence "ATCTAGAGGATATAC", we have two approaches to solve this.

# Approach 1: Use the traditional 'for' loop
# Create an empty string. The use the for loop.
sequence_complement = ""
for base in dna:
    base_complement = base_complements[base]
    sequence_complement+=base_complement
    print(sequence_complement)

# Approach 2: Use list comprehensions. This will combine the traditional loops into a single line.
sequence_complement2 = [base_complements[base] for base in dna]
print("Sequence complement 2:", sequence_complement2)
# You'll get the result in list form. Convert the list to string.
sequence_complement2 = "".join(sequence_complement2)
print("Sequence complement 2:", sequence_complement2)


# Find the complements of multiple nucleotide sequences
# This procedure here will have us combine functions and loops

dnasequences = ['ATCGA', 'TTAGC', 'ACCTAG']
# Create a function that will find the complement of a nucleotide sequence. Then reuse the function for all your sequences.
def sequence_complement_finder(sequence):
    base_complements = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
    sequence_complement = [base_complements[base] for base in sequence]
    sequence_complement ="".join(sequence_complement)
    return sequence_complement

# Use a 'for' loop to iterate over the list of sequences and find their respective complements
for sequence in dnasequences:
    sequence_complement = sequence_complement_finder(sequence)
    print(sequence_complement)
