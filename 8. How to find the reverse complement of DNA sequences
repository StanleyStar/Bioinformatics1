# This can be done in three steps

# Step 1: Obtain your DNA sequence
DNA = "ATCTAGAGGATATAC"

# Step 2: Find the reverse of the DNA sequence
# Create a function that finds the reverse of the sequence
def reverse_sequence(sequence):
    reverse = sequence[::-1]
    return reverse
# Call the function to find the reverse of the sequence
reverse_dna = reverse_sequence(DNA)
print("The reverse DNA is:", reverse_dna)

# Step 3: Find the complement of the reverse sequence
# Create a function to find the complement of a sequence and a dictionary that has information about the various bases and their respective complements
def complement_sequence(sequence):
    base_complements = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}
    complement_of_sequence = [base_complements[base] for base in sequence]
    complement_of_sequence = "".join(complement_of_sequence)
    return complement_of_sequence
# Call the function to find the complement of the reverse sequence
reverse_complement = complement_sequence(reverse_dna)
print("The reverse complement is:", reverse_complement)


# Find the reverse complement of multiple DNA sequences
# The strategy here is combining loops and the functions we've already created. And we can do this with two approaches

dnasequences = ['ATCGA', 'TTAGC', 'ACCTAG']

# Approach 1
for sequence in dnasequences:
    reverse = reverse_sequence(sequence)
    reverse_complement = complement_sequence(reverse)
    print("sequence:          ", sequence)
    print("reverse:           ", reverse)
    print("reverse complement:", reverse_complement)

# Approach 2: Here you add a third function
def reverse_complement(sequence):
    reverse = reverse_sequence(sequence)
    reverse_complement = complement_sequence(reverse)
    return reverse_complement
for sequence in dnasequences:
    r_complement = reverse_complement(sequence)
    print("sequence:          ", sequence)
    print("reverse complement:", r_complement)
